Universidad Simon Bolivar
Departamento de Computacion y Tecnologia de la informacion
CI3725 - Traductores e Interpretadores

Analisis Teorico - Practico

Autores: Richard Lares. 11-10508
		 Oscar Guillen. 11-11264


1. Proporcione una expresión regular E que corresponda a los comentarios
definidos en Lanscii. Dé el diagrama de transición (la representación
gráfica) de un autómata finito (posiblemente no-determinístico) M que
reconozca el lenguaje L denotado por E. De acuerdo con la definición
de los comentarios en Lanscii, explique brevemente cuáles son las deci-
siones tomadas al construir la expresión regular E para que efectivamente
sean cumplidas las restricciones de un comentario válido y porqué éstas
funcionan. 

  	R: E: /{-.*-}/ (No se usó escape para { ni },)

2. Proporcione dos expresiones regulares: E0 y E1 para el reconocimiento de
la palabra reservada write y los identificadores de variables del lenguaje
respectivamente.

  	R: 
  		E0: /write/ 	E1: /([A-Z]|[a-z]|_)([A-Z]|[a-z]|_|[0-9])*/



3. Dé los diagramas de transición (la representación gráfica) de dos autómantas
finitos (posiblemente no-determinísticos): M0 y M1 que reconozcan los
lenguajes L0 y L1 denotados por E0 y E1 respectivamente.


 	R: Diagramas plasmados en las imagenes M0.png y M1.png



4. Proponga el diagrama de transición de un autómata finito no-determinístico
M2 que reconozca la unión de los lenguajes L(M0) y L(M1).


  	R: Diagramas plasmados en las imagenes M2.png


5. Un analizador lexicográfico debe ser capaz de discernir a cuál lenguaje
pertenece una palabra (o, en este caso, token) que acaba de reconocer. De
acuerdo con esto, cada estado final del autómata M2 debe ser capaz de
diferenciar si la palabra reconocida pertenece al lenguaje L(M0) o L(M1).
Inidique lo anterior en cada estado final de M2.


  	R: EL autómata M2 definido presenta dos estados finales QfM0 y QfM1, ambos 
  	logran diferenciar a cuál lenguaje pertenece una palabra dada: QfM0 reconoce 
  	el lenguaje L(M0) y QfM1 reconoce el lenguaje L(M1).

6. La asignación anterior de estados finales a lenguajes debe de crear conflictos
de reconocimiento, indique cuáles son estos problemas y porqué ocurren.

	R: Es posible que existan palabras que formen parte de ambos lenguajes, lo 
	cual genera	un conflicto debido a que no es posible saber cuál transición 
	tomar para formar la palabra de un lenguaje y no del otro (aunque forme 
	parte de ambos). Por otro lado, en caso de tomar la transición incorrecta, 
	no será posible seguir formado palabras del otro lenguaje debido a que las 
	transiciones tomadas fueron aquellas pertenecientes al lenguaje "incorrecto".

7. De acuerdo con la pregunta anterior, indique cuáles son los conflictos del
autómata propuesto M2, especificando las palabras que los generan, los
lenguajes y estados finales involucrados.

	R: Para el caso particular del autómata M2 se presenta un conflicto con la
	palabra que reconoce L(M0), write, debido a que L(M1) también acepta esta 
	palabra, por lo tanto se presentarán conflictos al momento de decidir cuál
	transición tomar cuando se reconozca la palabra write, y por tanto decidir
	a qué lenguaje pertenece.

8. Diga cuál solución puede ser utilizada para resolver los conflictos de re-
conocimiento desarrollados en las preguntas 6 y 7. Explique brevemente
su solución y por qué funciona.

	R: Para resolver este problema se podría replantear el autómata M2' formado 
	por la unión de los autómatas M0' y M1', donde los primeros estados de M1' 
	reconocen los mismos símbolos que M1, exceptuando w,r,i,t,e, y posteriormente 
	reconoce los mismos símbolos que M1; M0' reconoce la palabra write, pero 
	posteriormente tiene una transición	M1' para reconocer todos los símbolos.
	M2' mantendrá los mismos estados finales que reconocen L(M0) y L(M1).
	El diagrama queda plasmado en M2'.png

9. ¿Cómo relaciona Ud. el desarrollo de las preguntas 2-8 con la imple-
mentación de su analizador lexicográfico para el lenguaje Lanscii?

	R: Con el desarrollo de estas preguntas se tomó en cuenta los posibles
	conflictos que se podían generar con esta palabra del lenguaje Lanscii
	(write)	y con otras inclusive (como < y <=). Por este motivo, 
	se estableció una jerarquía	en el reconocimiento de los símbolos de Lanscii
	para evitar estos conflictos, de manera que primero se reconociera write como
	instrucción y no como identificador, o <= primero que <.
