class Parser

token 	LCURLY PIPE RCURLY PERCENTAGE EXCLAMATIONMARK AT EQUALS READ WRITE SEMICOLON 
		LPARENTHESIS QUESTIONMARK RPARENTHESIS COLON LSQUARE RSQUARE DOUBLEDOT PLUS MINUS TIMES DIVIDE 
		AND OR NOT TRUE FALSE LESS LESSEQUAL GREATER GREATEREQUAL NOTEQUAL AMPERSAND TILDE DOLLAR 
		APOSTROPHE CANVAS EMPTYCANVAS ID NUM UMINUS

prechigh
	nonassoc SEMICOLON
	nonassoc EQUALS NOTEQUAL
	nonassoc LESS LESSEQUAL GREATER GREATEREQUAL
	right QUESTIONMARK COLON 
	nonassoc UMINUS
	left TIMES DIVIDE PERCENTAGE
	left PLUS MINUS
	nonassoc NOT
	left AND
	left OR
	nonassoc APOSTROPHE
	nonassoc DOLLAR
	left AMPERSAND TILDE	
preclow

start S

rule
	S	:	LCURLY D PIPE C RCURLY 
		|	LCURLY C RCURLY

	D	:	PERCENTAGE I 
		|	EXCLAMATIONMARK I
		|	AT I

	I	:	ID I
		|	ID D
		| 	ID

	C 	: 	ID EQUALS E
		| 	S
		|	READ ID
		| 	WRITE ID
		|	Cond
		|	It
		|	C SEMICOLON C

	Cond:	LPARENTHESIS E QUESTIONMARK C RPARENTHESIS
		|	LPARENTHESIS E QUESTIONMARK C COLON C RPARENTHESIS

	It	: 	LSQUARE E PIPE C RSQUARE
		|	LSQUARE E DOUBLEDOT E PIPE C RSQUARE
		|	LSQUARE ID COLON E DOUBLEDOT E PIPE C RSQUARE

	E	:	ID
		|	NUM
		|	E PLUS E
		|	E MINUS E
		|	E TIMES E
		|	E DIVIDE E
		|	E PERCENTAGE E
		|	MINUS E	=UMINUS
		|	LPARENTHESIS E RPARENTHESIS
		|	E AND E
		|	E OR E
		|	E NOT
		|	TRUE
		|	FALSE
		|	E LESS E
		|	E LESSEQUAL E
		|	E GREATER E
		|	E GREATEREQUAL E
		|	E EQUALS E
		|	E NOTEQUAL E
		|	E AMPERSAND E
		|	E TILDE E
		|	DOLLAR E
		|	E APOSTROPHE
		|	CANVAS
		|	EMPTYCANVAS

end

---- header----

require './lexer.rb'

---- inner ----

def parse(t)
	@lexer=t
	do_parse
end
def next_token
	puts @lexer
	@lexer.shift
end