Universidad Simón Bolívar
Departamento de Computación y Tecnología de la Información
CI3725 - Traductores e Interpretadores

LEEME.txt

Autores: Richard Lares 11-10508
		 Oscar Guillen 11-11264

	Decisiones de implementación

Para el analizador lexicográfico del lenguaje Lanscii se decidió realizar la 
verificación del contenido del archivo línea por línea haciendo uso del método
"match" implementado para la clase String, la cual recibe como parámetro una 
expresión regular que en este caso será una regexp que representará las palabras 
reservadas del lenguaje Lanscii de manera jerárquica. Antes de hacer esta 
verificación se decidió usar la función "split", también de la clase String, 
para eliminar los espacios y/o tabuladores de cada línea y así poder "matchear" 
correctamente las expresiones; sin embargo se usó un contador que recorre la 
línea original para imprimir la columna correcta donde fue encontrado el token.
Se aprovecha lo retornado por la función "match" para continuar el matcheo 
dentro de cada posición del arreglo split, esto para el caso en que hayan tokens
seguidos en una misma posición del arreglo. Para imprimir el identificador de cada
token se decidió usar un Hash (Diccionario), que tiene como clave el símbolo 
y como valor el string identificador. Se decidió usar variables contadores de 
línea y de columna, y arreglos para almacenar los strings que deben imprimirse 
en caso de un lenguaje correcto o incorrecto.

	Estado actual del proyecto

Actualmente el proyecto funciona correctamente. Se hicieron pruebas con diversos 
archivos y el analizador lexicográfico funcionó sin ningún inconveniente.

	Problemas presentes

En proceso

	Cualquier comentario respecto al proyecto que consideren necesario

Para lograr reconocer identificadores en el lenguaje, se decidió agregar a la 
expresión del "matcheo" la siguiente expresión:

			([A-Z]|[a-z]|_)([A-Z]|[a-z]|_|[0-9])*

Así, se logra reconocer todo tipo de combinaciones posibles en un identificador.
En el caso de discernir símbolos que no forman parte del lenguaje, se decidió 
hacer un escaneo a los elementos que contiene una estructura MatchData devuelta 
por la función match: resultado del "matcheo", pre_match (substring anterior al 
string "matcheado") y post_match (substring posterior al string "matcheado"). 
Con esto se pudo analizar todo tipo de combinaciones a la hora de existir algun 
elemento no perteneciente al lenguaje.